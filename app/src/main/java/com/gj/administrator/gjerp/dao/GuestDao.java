package com.gj.administrator.gjerp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.gj.administrator.gjerp.domain.Guest;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GUEST".
*/
public class GuestDao extends AbstractDao<Guest, Long> {

    public static final String TABLENAME = "GUEST";

    /**
     * Properties of entity Guest.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Guest_type = new Property(2, int.class, "guest_type", false, "GUEST_TYPE");
        public final static Property Gender = new Property(3, String.class, "gender", false, "GENDER");
        public final static Property Card_type = new Property(4, String.class, "card_type", false, "CARD_TYPE");
        public final static Property Card_id = new Property(5, String.class, "card_id", false, "CARD_ID");
        public final static Property Telphone = new Property(6, String.class, "telphone", false, "TELPHONE");
        public final static Property Create_time = new Property(7, java.util.Date.class, "create_time", false, "CREATE_TIME");
        public final static Property Country = new Property(8, String.class, "country", false, "COUNTRY");
        public final static Property Address = new Property(9, String.class, "address", false, "ADDRESS");
        public final static Property Zip = new Property(10, String.class, "zip", false, "ZIP");
        public final static Property Email = new Property(11, String.class, "email", false, "EMAIL");
    };

    private DaoSession daoSession;


    public GuestDao(DaoConfig config) {
        super(config);
    }
    
    public GuestDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GUEST\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"GUEST_TYPE\" INTEGER NOT NULL ," + // 2: guest_type
                "\"GENDER\" TEXT NOT NULL ," + // 3: gender
                "\"CARD_TYPE\" TEXT NOT NULL ," + // 4: card_type
                "\"CARD_ID\" TEXT NOT NULL ," + // 5: card_id
                "\"TELPHONE\" TEXT NOT NULL ," + // 6: telphone
                "\"CREATE_TIME\" INTEGER NOT NULL ," + // 7: create_time
                "\"COUNTRY\" TEXT," + // 8: country
                "\"ADDRESS\" TEXT," + // 9: address
                "\"ZIP\" TEXT," + // 10: zip
                "\"EMAIL\" TEXT);"); // 11: email
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GUEST\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Guest entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindLong(3, entity.getGuest_type());
        stmt.bindString(4, entity.getGender());
        stmt.bindString(5, entity.getCard_type());
        stmt.bindString(6, entity.getCard_id());
        stmt.bindString(7, entity.getTelphone());
        stmt.bindLong(8, entity.getCreate_time().getTime());
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(9, country);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(10, address);
        }
 
        String zip = entity.getZip();
        if (zip != null) {
            stmt.bindString(11, zip);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(12, email);
        }
    }

    @Override
    protected void attachEntity(Guest entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Guest readEntity(Cursor cursor, int offset) {
        Guest entity = new Guest( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.getInt(offset + 2), // guest_type
            cursor.getString(offset + 3), // gender
            cursor.getString(offset + 4), // card_type
            cursor.getString(offset + 5), // card_id
            cursor.getString(offset + 6), // telphone
            new java.util.Date(cursor.getLong(offset + 7)), // create_time
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // country
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // address
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // zip
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // email
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Guest entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setGuest_type(cursor.getInt(offset + 2));
        entity.setGender(cursor.getString(offset + 3));
        entity.setCard_type(cursor.getString(offset + 4));
        entity.setCard_id(cursor.getString(offset + 5));
        entity.setTelphone(cursor.getString(offset + 6));
        entity.setCreate_time(new java.util.Date(cursor.getLong(offset + 7)));
        entity.setCountry(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAddress(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setZip(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setEmail(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Guest entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Guest entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
