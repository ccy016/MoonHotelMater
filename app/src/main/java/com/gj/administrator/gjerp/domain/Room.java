package com.gj.administrator.gjerp.domain;

import com.gj.administrator.gjerp.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.gj.administrator.gjerp.dao.HotelDao;
import com.gj.administrator.gjerp.dao.RoomDao;
import com.gj.administrator.gjerp.dao.RoomTypeDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "ROOM".
 */
public class Room {

    private Long id;
    /** Not-null value. */
    private String num;
    private int room_state;
    private long roomtype_id;
    private long hotel_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient RoomDao myDao;

    private RoomType roomType;
    private Long roomType__resolvedKey;

    private Hotel hotel;
    private Long hotel__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Room() {
    }

    public Room(Long id) {
        this.id = id;
    }

    public Room(Long id, String num, int room_state, long roomtype_id, long hotel_id) {
        this.id = id;
        this.num = num;
        this.room_state = room_state;
        this.roomtype_id = roomtype_id;
        this.hotel_id = hotel_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getRoomDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getNum() {
        return num;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setNum(String num) {
        this.num = num;
    }

    public int getRoom_state() {
        return room_state;
    }

    public void setRoom_state(int room_state) {
        this.room_state = room_state;
    }

    public long getRoomtype_id() {
        return roomtype_id;
    }

    public void setRoomtype_id(long roomtype_id) {
        this.roomtype_id = roomtype_id;
    }

    public long getHotel_id() {
        return hotel_id;
    }

    public void setHotel_id(long hotel_id) {
        this.hotel_id = hotel_id;
    }

    /** To-one relationship, resolved on first access. */
    public RoomType getRoomType() {
        long __key = this.roomtype_id;
        if (roomType__resolvedKey == null || !roomType__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RoomTypeDao targetDao = daoSession.getRoomTypeDao();
            RoomType roomTypeNew = targetDao.load(__key);
            synchronized (this) {
                roomType = roomTypeNew;
            	roomType__resolvedKey = __key;
            }
        }
        return roomType;
    }

    public void setRoomType(RoomType roomType) {
        if (roomType == null) {
            throw new DaoException("To-one property 'roomtype_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.roomType = roomType;
            roomtype_id = roomType.getId();
            roomType__resolvedKey = roomtype_id;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Hotel getHotel() {
        long __key = this.hotel_id;
        if (hotel__resolvedKey == null || !hotel__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            HotelDao targetDao = daoSession.getHotelDao();
            Hotel hotelNew = targetDao.load(__key);
            synchronized (this) {
                hotel = hotelNew;
            	hotel__resolvedKey = __key;
            }
        }
        return hotel;
    }

    public void setHotel(Hotel hotel) {
        if (hotel == null) {
            throw new DaoException("To-one property 'hotel_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.hotel = hotel;
            hotel_id = hotel.getId();
            hotel__resolvedKey = hotel_id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
